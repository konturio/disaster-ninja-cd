{{ if .Values.createResource.ingress }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.envName }}-isochrone-api-ng
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: isochrone-api-ng
    app.kubernetes.io/instance: {{ .Values.envName }}-isochrone-api
    app.kubernetes.io/managed-by: "Helm"
    stage: {{ .Values.envName }}
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    cert-manager.io/cluster-issuer: letsencrypt-production #use letsencrypt-staging for testing
    acme.cert-manager.io/http01-edit-in-place: "true" #required otherwise ACME challenge can't be completed
    {{ if .Values.isOfflineInstallation }}
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    {{ else }}
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin 'https://{{ .Values.dnsNameOuter }}';

        add_header Access-Control-Allow-Credentials 'true';
        add_header Access-Control-Allow-Methods *;

        add_header Access-Control-Allow-Headers 'Authorization,Keep-Alive,User-Agent,If-Modified-Since,Cache-Control,Content-Type';

        add_header Access-Control-Max-Age 86400;
        add_header Content-Type 'text/plain charset=UTF-8';
        add_header Content-Length 0;
        return 204;
      }

      add_header Access-Control-Allow-Origin 'https://{{ .Values.dnsNameOuter }}';
      add_header Access-Control-Allow-Credentials 'true';
      add_header Access-Control-Allow-Methods *;
      add_header Access-Control-Allow-Headers 'Authorization,Keep-Alive,User-Agent,If-Modified-Since,Cache-Control,Content-Type';
    {{ end }}
spec:
  tls:
    - hosts:
        - {{ .Values.ingressHost }}
      secretName: {{ .Values.envName }}-isochrone-api-tls # < cert-manager will store the created certificate in this secret.
  ingressClassName: {{ .Values.ingressClass }}
  rules:
    - host: {{ .Values.ingressHost }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ .Values.envName }}-isochrone-api
                port:
                  name: main
{{ end }}
