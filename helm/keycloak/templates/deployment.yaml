apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.envName }}-keycloak
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: {{ .Values.envName }}-keycloak
    app.kubernetes.io/managed-by: "Helm"
    stage: {{ .Values.envName }}
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }} #only roll pods if config (rendered!) changed
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/instance: {{ .Values.envName }}-keycloak
      #don't add app.kubernetes.io/version
      app.kubernetes.io/managed-by: "Helm"
      stage: {{ .Values.envName }}
  replicas: {{ .Values.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/instance: {{ .Values.envName }}-keycloak
        app.kubernetes.io/managed-by: "Helm"
        stage: {{ .Values.envName }}
      annotations:
        meta.helm.sh/release-name: {{ .Release.Name }}
        meta.helm.sh/release-namespace: {{ .Release.Namespace }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }} #only roll pods if config (rendered!) changed
    spec:
      {{ if .Values.image.usePullSecret }}
      imagePullSecrets: #TODO remove once image is on ghcr.io
        - name: {{ .Values.image.pullSecretName }}{{ end }}
      containers:
      - name: keycloak
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
          - containerPort: {{ .Values.service.main }}
            protocol: TCP
            name: main
          - containerPort: {{ .Values.service.management }}
            protocol: TCP
            name: management
        {{ if .Values.createResource.importDefaultRealm }}
        volumeMounts:
          - name: import-volume
            mountPath: /usr/import
            readOnly: true
        {{ end }}
        resources:
          requests:
            cpu: {{ .Values.resources.requests.cpu | quote }}
            memory: {{ .Values.resources.requests.memory | quote }}
          limits:
            memory: {{ .Values.resources.limits.memory | quote }}
        envFrom:
        - configMapRef:
            name: {{ .Values.envName }}-keycloak
        - secretRef:
            name: {{ .Values.envName }}-keycloak
        readinessProbe:
          httpGet:
            path: /health
            port: {{ .Values.service.management }}
          failureThreshold: 1
          periodSeconds: 15
          initialDelaySeconds: {{ .Values.probeInitialDelaySeconds }}
        {{ if .Values.createResource.deploymentLivenessProbe }}
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.service.management }}
          failureThreshold: 10
          periodSeconds: 15
          initialDelaySeconds: {{ .Values.probeInitialDelaySeconds }}
        {{ end }}
      {{ if .Values.createResource.importDefaultRealm }}
      volumes:
        - name: import-volume
          configMap:
            name: {{ .Values.envName }}-import-keycloak
            items:
              - key: import-cfgmap-data
                path: "{{ .Values.envName }}-realm.json"
      {{ end }}
---
