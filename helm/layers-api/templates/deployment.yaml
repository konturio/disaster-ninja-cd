apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/instance: {{ .Values.envName }}-layers-api
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: layers-api
    stage: {{ .Values.envName }}
  name: {{ .Values.envName }}-layers-api
  namespace: {{ .Release.Namespace }}
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Values.envName }}-layers-api
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: layers-api
      stage: {{ .Values.envName }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        meta.helm.sh/release-name: {{ .Release.Name }}
        meta.helm.sh/release-namespace: {{ .Release.Namespace }}
        #only roll pods if config (rendered!) changed
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        app.kubernetes.io/instance: {{ .Values.envName }}-layers-api
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: layers-api
        stage: {{ .Values.envName }}
    spec:
      {{- if .Values.image.usePullSecret }}
      imagePullSecrets: #TODO remove once image is on ghcr.io
        - name: {{ .Values.image.pullSecretName }}
      {{- end }}
      containers:
        - env:
            - name: JAVA_TOOL_OPTIONS
              value: -XX:MaxRAMPercentage=50
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: http://$(MY_NODE_NAME):{{ .Values.otlpTracesPort }}
          envFrom:
            - configMapRef:
                name: {{ .Values.envName }}-layers-api
            - secretRef:
                name: {{ .Values.envName }}-layers-api
          image: {{ .Values.image.name }}:{{ .Values.image.tag }}
          imagePullPolicy: IfNotPresent
          {{- if .Values.createResource.deploymentLivenessProbe }}
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /health/liveness
              port: {{ .Values.management.port }}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.probeInitialDelaySeconds }}
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 1
          {{- end }}
          name: layers-api
          ports:
            - containerPort: {{ .Values.port }}
              name: main
              protocol: TCP
            - containerPort: {{ .Values.management.port }}
              name: management
              protocol: TCP
          readinessProbe:
            failureThreshold: 1
            httpGet:
              path: /health/readiness
              port: {{ .Values.management.port }}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.probeInitialDelaySeconds }}
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: {{ .Values.resources.limits.memory }}
            requests:
              cpu: {{ .Values.resources.requests.cpu | quote }}
              memory: {{ .Values.resources.requests.memory }}
          # securityContext:
          #   capabilities:
          #     add:
          #       - SYS_PTRACE
      restartPolicy: Always
      # shareProcessNamespace: true
      terminationGracePeriodSeconds: 30
