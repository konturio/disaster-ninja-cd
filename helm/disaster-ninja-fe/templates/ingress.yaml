{{ if .Values.createResource.ingress }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.envName }}-disaster-ninja-ng
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: disaster-ninja-ng
    app.kubernetes.io/instance: {{ .Values.envName }}-disaster-ninja
    app.kubernetes.io/managed-by: "Helm"
    stage: {{ .Values.envName }}
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    cert-manager.io/cluster-issuer: letsencrypt-production #use letsencrypt-staging for testing
    acme.cert-manager.io/http01-edit-in-place: "true" #required otherwise ACME challenge can't be completed
    nginx.ingress.kubernetes.io/use-forwarded-headers: "true" # allow X-Forwarded-Host for different hostnames
    # if set to "true" there is HTTP 500 for e.g. curl -v http://maps.kontur.io/active/
    # so we do check scheme and redirect manually
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,User-Language
    nginx.ingress.kubernetes.io/cors-allow-credentials: "false"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.ingress.kubernetes.io/upstream-keepalive-connections: "32"


  {{- if .Values.isOfflineInstallation }}
    nginx.ingress.kubernetes.io/server-snippet: |
  {{- else }}
    nginx.ingress.kubernetes.io/proxy-body-size: {{ .Values.client_max_body_size }}
    nginx.ingress.kubernetes.io/proxy-read-timeout: 300s
    {{- if or (eq .Values.k8s_cluster_flavor "k8s-01.kontur.io") (eq .Values.k8s_cluster_flavor "k8s-02.kontur.io") }}
    nginx.ingress.kubernetes.io/configuration-snippet: |
      include /etc/nginx/CORS_02_location.inc.conf;
    {{- end }}
    nginx.ingress.kubernetes.io/server-snippet: |
      {{- if or (eq .Values.k8s_cluster_flavor "k8s-01.kontur.io") (eq .Values.k8s_cluster_flavor "k8s-02.kontur.io") }}
      set $cors_config_file '/etc/nginx/default.cors.json';
      {{- end }}
  {{- end }}

      if ($scheme = "http") {
        return 301 https://$host$request_uri;
      }

      set $frame_options '';
      if ($http_referer !~ '^https?:\/\/([^\/]+\.)?(webvisor\.com|metri[ck]a\.yandex\.(com|ru|by|com\.tr))\/'){
        set $frame_options $dn2021_x_frame_options;
      }

      # more_set_headers "Cache-Control: $dn_cache_control";
      more_set_headers "Strict-Transport-Security: max-age=31536000";
      more_set_headers "X-Frame-Options: $frame_options";
      more_set_headers "X-Content-Type-Options: nosniff";

      set $cors_config_file '/etc/nginx/disaster.ninja.cors.json';

      proxy_bind off;
      proxy_ssl_server_name on;

      include /etc/nginx/ngx_http_proxy_module.conf;

      proxy_set_header Host $proxy_host;

      location @nonexistent {
        rewrite "^/active(?=/).*/[^/.]+/{0,1}$" /active/ last;
        return 404;
      }

      client_max_body_size {{ .Values.client_max_body_size }};

      proxy_read_timeout 300s;

      # for DN-prod until user-tiles are on lima
      location /tiles/ {
        location /tiles/users/ {
          proxy_pass https://lima.kontur.io;
        }

        more_set_headers "Strict-Transport-Security: max-age=31536000";
        more_set_headers "X-Frame-Options: SAMEORIGIN";
        more_set_headers "X-Content-Type-Options: nosniff";

        include /etc/nginx/CORS_02_location.inc.conf;
      }

      location = /robots.txt {
        return 200 $dn2021_robots_txt;
      }

      location = / {
        return 302 /active/;
      }

      location ^~ /active/preview.png {
        resolver 1.1.1.1 1.0.0.1;
  {{- if not .Values.isOfflineInstallation }}
        {{- if or (eq .Values.k8s_cluster_flavor "k8s-01.kontur.io") (eq .Values.k8s_cluster_flavor "k8s-02.kontur.io") }}
        include /etc/nginx/CORS_02_location.inc.conf;
        {{- end }}
  {{- end }}
        proxy_pass  {{ .Values.epigHost }}/active/preview.png;
      }

      location ~^/active/reports/(.*\..*)$ {
        resolver 1.1.1.1 1.0.0.1;
  {{- if not .Values.isOfflineInstallation }}
        {{- if or (eq .Values.k8s_cluster_flavor "k8s-01.kontur.io") (eq .Values.k8s_cluster_flavor "k8s-02.kontur.io") }}
        include /etc/nginx/CORS_02_location.inc.conf;
        {{- end }}
  {{- end }}
        proxy_pass  {{ .Values.reportsBucket }}$1;
      }

      location ~/active/reports[/]?[^/.]+$ {
        rewrite "^/active(?=/).*/[^/.]+/{0,1}$" /active/ last;
        return 404;
      }

      location /active/reports {
        rewrite "^/active(?=/).*/[^/.]+/{0,1}$" /active/ last;
        return 404;
      }

      location /active/api/tiles/bivariate/ {
          if_modified_since before;

          proxy_cache api01;
          proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
          proxy_cache_background_update on;
          proxy_cache_revalidate on;
          proxy_cache_valid {{ .Values.proxy_cache_valid }};
          proxy_cache_lock on;

          proxy_pass http://{{ .Values.envName }}-disaster-ninja-be.{{ .Release.Namespace }}.svc.cluster.local:8627;

          add_header X-Cache-Status $upstream_cache_status;

          add_header access-control-allow-headers "DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,User-Language";
          add_header access-control-allow-methods "GET, PUT, POST, DELETE, PATCH, OPTIONS";
          add_header access-control-allow-origin "*";
          add_header access-control-max-age 1728000;
      }

spec:
  tls:
    - hosts:
      {{- range $i, $h := .Values.ingressHosts }}
        - {{ $h }}
      {{- end }}
      secretName: {{ .Values.envName }}-disaster-ninja-tls
  ingressClassName: {{ .Values.ingressClass }}
  rules:
      {{$envName := .Values.envName }}
      {{- range $i, $h := .Values.ingressHosts }}
    - host: {{ $h }}
      http:
        paths:
          - path: /active/
            pathType: Prefix
            backend:
              service:
                name: {{ $envName }}-disaster-ninja-fe
                port:
                  name: fe-main
          - path: /live/
            pathType: Prefix
            backend:
              service:
                name: {{ $envName }}-disaster-ninja-fe
                port:
                  name: fe-main
          - path: /active/api/
            pathType: Prefix
            backend:
              service:
                name: {{ $envName }}-disaster-ninja-be
                port:
                  name: be-main
      {{- end }}
{{ end }}
