{{ if .Values.createResource.ingress }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.envName }}-disaster-ninja
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: disaster-ninja
    app.kubernetes.io/instance: {{ .Values.envName }}-disaster-ninja
    app.kubernetes.io/managed-by: "Helm"
    stage: {{ .Values.envName }}
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    cert-manager.io/cluster-issuer: letsencrypt-production #use letsencrypt-staging for testing
    acme.cert-manager.io/http01-edit-in-place: "true" #required otherwise ACME challenge can't be completed
    nginx.ingress.kubernetes.io/use-forwarded-headers: "true" # allow X-Forwarded-Host for different hostnames
  {{- if .Values.isOfflineInstallation }}
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/server-snippet: |
  {{- else }}
    nginx.org/client-max-body-size: {{ .Values.client_max_body_size }}
    nginx.org/proxy-read-timeout: 300s
    {{- if or (eq .Values.k8s_cluster_flavor "k8s-01.kontur.io") (eq .Values.k8s_cluster_flavor "k8s-02.kontur.io") }}
    nginx.org/location-snippets: |
      include CORS_02_location.inc.conf;
    {{- end }}
    nginx.org/server-snippets: |
      {{- if or (eq .Values.k8s_cluster_flavor "k8s-01.kontur.io") (eq .Values.k8s_cluster_flavor "k8s-02.kontur.io") }}
      set $cors_config_file '/etc/nginx/default.cors.json';
      {{- end }}
  {{- end }}
      client_max_body_size {{ .Values.client_max_body_size }};
      proxy_read_timeout 300s;

      location = / {
        return 302 /active/;
      }
      location ^~ /active/preview.png {
        resolver 1.1.1.1 1.0.0.1;
  {{- if not .Values.isOfflineInstallation }}
        {{- if or (eq .Values.k8s_cluster_flavor "k8s-01.kontur.io") (eq .Values.k8s_cluster_flavor "k8s-02.kontur.io") }}
        include CORS_02_location.inc.conf;
        {{- end }}      
  {{- end }}
        proxy_pass  {{ .Values.epigHost }}/active/preview.png;
      }
      location ~^/active/reports/(.*\..*)$ {
        resolver 1.1.1.1 1.0.0.1;
  {{- if not .Values.isOfflineInstallation }}
        {{- if or (eq .Values.k8s_cluster_flavor "k8s-01.kontur.io") (eq .Values.k8s_cluster_flavor "k8s-02.kontur.io") }}
        include CORS_02_location.inc.conf;
        {{- end }}
  {{- end }}
        proxy_pass  {{ .Values.reportsBucket }}$1;
      }
      location ~/active/reports[/]?[^/.]+$ {
        rewrite "^/active(?=/).*/[^/.]+/{0,1}$" /active/ last;
        return 404;
      }
      location /active/reports {
        rewrite "^/active(?=/).*/[^/.]+/{0,1}$" /active/ last;
        return 404;
      }
  {{- if .Values.isOfflineInstallation }} #TODO workaround
      location /layers/tiles/basemap/style_ninja.json {
        resolver 1.1.1.1 1.0.0.1;
        proxy_pass https://basemap-locker01.s3.eu-central-1.amazonaws.com/PROD/styles/style_ninja.json;
      }
  {{- end }}
spec:
  tls:
    - hosts:
      {{- range $key, $val := .Values.ingressHosts }}
        - {{ $key }}
      {{- end }}
      secretName: {{ .Values.envName }}-disaster-ninja-tls
  ingressClassName: nginx
  rules:
      {{$envName := .Values.envName }}
      {{- range $key, $val := .Values.ingressHosts }}
    - host: {{ $key }}
      http:
        paths:
  {{- if $val.tls }} #TODO workaround
          - path: {{ $val.tls.service.path }}
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ $val.tls.service.name }}
                port:
                  number: 8089
  {{- end }}
          - path: /active/
            pathType: Prefix
            backend:
              service:
                name: {{ $envName }}-disaster-ninja-fe
                port:
                  name: fe-main
          - path: /live/
            pathType: Prefix
            backend:
              service:
                name: {{ $envName }}-disaster-ninja-fe
                port:
                  name: fe-main
          - path: /active/api/
            pathType: Prefix
            backend:
              service:
                name: {{ $envName }}-disaster-ninja-be
                port:
                  name: be-main
      {{- end }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.envName }}-disaster-ninja-ng
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: disaster-ninja-ng
    app.kubernetes.io/instance: {{ .Values.envName }}-disaster-ninja
    app.kubernetes.io/managed-by: "Helm"
    stage: {{ .Values.envName }}
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    cert-manager.io/cluster-issuer: letsencrypt-production #use letsencrypt-staging for testing
    acme.cert-manager.io/http01-edit-in-place: "true" #required otherwise ACME challenge can't be completed
    nginx.ingress.kubernetes.io/use-forwarded-headers: "true" # allow X-Forwarded-Host for different hostnames
  {{- if .Values.isOfflineInstallation }}
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/server-snippet: |
  {{- else }}
    nginx.ingress.kubernetes.io/proxy-body-size: {{ .Values.client_max_body_size }}
    nginx.ingress.kubernetes.io/proxy-read-timeout: 300s
    {{- if or (eq .Values.k8s_cluster_flavor "k8s-01.kontur.io") (eq .Values.k8s_cluster_flavor "k8s-02.kontur.io") }}
    nginx.ingress.kubernetes.io/configuration-snippet: |
      include /etc/nginx/CORS_02_location.inc.conf;
    {{- end }}
    nginx.ingress.kubernetes.io/server-snippet: |
      {{- if or (eq .Values.k8s_cluster_flavor "k8s-01.kontur.io") (eq .Values.k8s_cluster_flavor "k8s-02.kontur.io") }}
      set $cors_config_file '/etc/nginx/default.cors.json';
      {{- end }}
  {{- end }}

      if ($host = "maps.kontur.io") {
        return 301 https://disaster.ninja/active/?app=634f23f5-f898-4098-a8bd-09eb7c1e1ae5;
      }

      expires $dn2021_expires;
      more_set_headers "Strict-Transport-Security: max-age=31536000";
      more_set_headers "X-Frame-Options: $dn2021_x_frame_options";
      more_set_headers "X-Content-Type-Options: nosniff";

      set $cors_config_file '/etc/nginx/disaster.ninja.cors.json';

      proxy_bind off;
      proxy_ssl_server_name on;

      include /etc/nginx/ngx_http_proxy_module.conf;

      proxy_set_header Host $proxy_host;

      more_clear_headers "Cache-Control";

      location @nonexistent {
        rewrite "^/active(?=/).*/[^/.]+/{0,1}$" /active/ last;
        return 404;
      }

      client_max_body_size {{ .Values.client_max_body_size }};

      proxy_read_timeout 300s;

      location = /robots.txt {
        return 200 $dn2021_robots_txt;
      }

      location = / {
        return 302 /active/;
      }

      location ^~ /active/preview.png {
        resolver 1.1.1.1 1.0.0.1;
  {{- if not .Values.isOfflineInstallation }}
        {{- if or (eq .Values.k8s_cluster_flavor "k8s-01.kontur.io") (eq .Values.k8s_cluster_flavor "k8s-02.kontur.io") }}
        include /etc/nginx/CORS_02_location.inc.conf;
        {{- end }}
  {{- end }}
        proxy_pass  {{ .Values.epigHost }}/active/preview.png;
      }

      location ~^/active/reports/(.*\..*)$ {
        resolver 1.1.1.1 1.0.0.1;
  {{- if not .Values.isOfflineInstallation }}
        {{- if or (eq .Values.k8s_cluster_flavor "k8s-01.kontur.io") (eq .Values.k8s_cluster_flavor "k8s-02.kontur.io") }}
        include /etc/nginx/CORS_02_location.inc.conf;
        {{- end }}
  {{- end }}
        proxy_pass  {{ .Values.reportsBucket }}$1;
      }

      location ~/active/reports[/]?[^/.]+$ {
        rewrite "^/active(?=/).*/[^/.]+/{0,1}$" /active/ last;
        return 404;
      }

      location /active/reports {
        rewrite "^/active(?=/).*/[^/.]+/{0,1}$" /active/ last;
        return 404;
      }

      location /tiles/ {

        location /tiles/users/ {
          proxy_pass https://lima.kontur.io;
        }

        proxy_cache off;
        proxy_cache_valid 600s;
        proxy_cache_key 'layers-tiles-$request_method$host$uri$is_args$args$http_authorization$request_body';

        more_set_headers "Strict-Transport-Security: max-age=31536000";
        more_set_headers "X-Frame-Options: SAMEORIGIN";
        more_set_headers "X-Content-Type-Options: nosniff";

        include /etc/nginx/CORS_02_location.inc.conf;

        location ~ ^(?:/layers)?/tiles/basemap/(sprite.*)$ {
          rewrite ^ $request_uri;
          rewrite ^(?:/layers)?/tiles/basemap/(sprite.*)$ $1 break;
          return 400; # assertion checker

          proxy_pass https://basemap-locker01.s3.eu-central-1.amazonaws.com/PROD/sprite/$1;
          proxy_cache main1;
        }

        location ~ ^(?:/layers)?/tiles/basemap/glyphs/(.*)$ {
          rewrite ^ $request_uri;
          rewrite ^(?:/layers)?/tiles/basemap/glyphs/(.*)$ $1 break;
          return 400; # assertion checker

          proxy_pass https://basemap-locker01.s3.eu-central-1.amazonaws.com/PROD/glyphs/$uri;
          proxy_cache main1;
        }

        location ~ ^(?:/layers)?/tiles/basemap/(style.*)$ {
          rewrite ^ $request_uri;
          rewrite ^(?:/layers)?/tiles/basemap/(style.*)$ $1 break;
          return 400; # assertion checker

          proxy_pass https://basemap-locker01.s3.eu-central-1.amazonaws.com/PROD/styles/$1;
          proxy_cache main1;
        }
      }

  {{- if .Values.isOfflineInstallation }} #TODO workaround
      location /layers/tiles/basemap/style_ninja.json {
        resolver 1.1.1.1 1.0.0.1;
        proxy_pass https://basemap-locker01.s3.eu-central-1.amazonaws.com/PROD/styles/style_ninja.json;
      }
  {{- end }}
spec:
  tls:
    - hosts:
      {{- range $key, $val := .Values.ingressHosts }}
        - {{ $key }}
      {{- end }}
      secretName: {{ .Values.envName }}-disaster-ninja-tls-ng
  ingressClassName: {{ .Values.ingressClass }}
  rules:
      {{$envName := .Values.envName }}
      {{- range $key, $val := .Values.ingressHosts }}
    - host: {{ $key }}
      http:
        paths:
  {{- if $val.tls }} #TODO workaround
          - path: {{ $val.tls.service.path }}
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ $val.tls.service.name }}
                port:
                  number: 8089
  {{- end }}
          - path: /active/
            pathType: Prefix
            backend:
              service:
                name: {{ $envName }}-disaster-ninja-fe
                port:
                  name: fe-main
          - path: /live/
            pathType: Prefix
            backend:
              service:
                name: {{ $envName }}-disaster-ninja-fe
                port:
                  name: fe-main
          - path: /active/api/
            pathType: Prefix
            backend:
              service:
                name: {{ $envName }}-disaster-ninja-be
                port:
                  name: be-main
      {{- end }}
{{ end }}
