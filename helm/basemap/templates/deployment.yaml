apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.envName }}-basemap-tileserver
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: basemap-tileserver
    app.kubernetes.io/instance: {{ .Values.envName }}-basemap-tileserver
    app.kubernetes.io/managed-by: "Helm"
    stage: {{ .Values.envName }}
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: basemap-tileserver
      app.kubernetes.io/instance: {{ .Values.envName }}-basemap-tileserver
      #don't add app.kubernetes.io/version
      app.kubernetes.io/managed-by: "Helm"
      stage: {{ .Values.envName }}
  replicas: {{ .Values.tileserver.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:
        app.kubernetes.io/name: basemap-tileserver
        app.kubernetes.io/instance: {{ .Values.envName }}-basemap-tileserver
        app.kubernetes.io/managed-by: "Helm"
        stage: {{ .Values.envName }}
      annotations:
        meta.helm.sh/release-name: {{ .Release.Name }}
        meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    spec:
      {{ if .Values.images.usePullSecret }}
      imagePullSecrets:
      - name: {{ .Values.images.pullSecretName }}
      {{ end }}
      volumes:
      - name: {{ .Values.envName }}-basemap-tileserver-{{ .Values.tileserver.storageType }}
        {{- if eq .Values.tileserver.storageType "pvc" }}
        persistentVolumeClaim:
          claimName: {{ .Values.envName }}-basemap-tileserver-{{ .Values.tileserver.storageType }}
        {{- else }}
        emptyDir:
          sizeLimit: {{ .Values.pvc.tileStorageSize }}
        {{- end }}
      initContainers:
      - command:
        - aws
        - s3
        - sync
        - {{ .Values.basemap.s3.path }}
        - /data
        envFrom:
        - configMapRef:
            name: {{ .Values.envName }}-basemap
        - secretRef:
            name: {{ .Values.envName }}-basemap
        image: 'nexus.kontur.io:8084/amazon/aws-cli'
        imagePullPolicy: Always
        name: download-basemap-from-s3
        volumeMounts:
        - mountPath: /data
          name: {{ .Values.envName }}-basemap-tileserver-{{ .Values.tileserver.storageType }}
      containers:
      - name: tileserver-gl
        args:
        - '-p'
        - {{ .Values.tileserver.port | quote }}
        - '--mbtiles'
        - basemap.mbtiles
        - '-V'
        image: {{ .Values.tileserver.image }}:{{ .Values.tileserver.tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: {{ .Values.tileserver.port }}
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 1
          httpGet:
            path: /health
            port: {{ .Values.tileserver.port }}
            scheme: HTTP
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 1
        startupProbe:
          httpGet:
            path: /health
            port: {{ .Values.tileserver.port }}
            scheme: HTTP
          periodSeconds: 10
          failureThreshold: 100
        ports:
        - containerPort: {{ .Values.tileserver.port }}
          name: main
          protocol: TCP
        volumeMounts:
        - mountPath: /data
          name: {{ .Values.envName }}-basemap-tileserver-{{ .Values.tileserver.storageType }}
        resources:
          requests:
            cpu: {{ .Values.resources.tileserver.requests.cpu | quote }}
            memory: {{ .Values.resources.tileserver.requests.memory | quote }}
          limits:
            cpu: {{ .Values.resources.tileserver.limits.cpu | quote }}
            memory: {{ .Values.resources.tileserver.limits.memory | quote }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
