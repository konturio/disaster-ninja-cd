{{ if .Values.createResource.ingress }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    acme.cert-manager.io/http01-edit-in-place: "true" #required otherwise ACME challenge can't be completed
    cert-manager.io/cluster-issuer: letsencrypt-production #use letsencrypt-staging for testing
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  {{- if .Values.isOfflineInstallation }}
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 5m
    nginx.ingress.kubernetes.io/server-snippet: |
  {{- else }}
    nginx.ingress.kubernetes.io/proxy-body-size: 5m
    {{- if or (eq .Values.k8s_cluster_flavor "k8s-01.kontur.io") (eq .Values.k8s_cluster_flavor "k8s-02.kontur.io") }}
    nginx.ingress.kubernetes.io/location-snippet: |
      include CORS_02_location.inc.conf;
    {{- end }}
    nginx.ingress.kubernetes.io/server-snippet: |
      {{- if or (eq .Values.k8s_cluster_flavor "k8s-01.kontur.io") (eq .Values.k8s_cluster_flavor "k8s-02.kontur.io") }}
      set $cors_config_file '/etc/nginx/default.cors.json';
      {{- end }}
  {{- end }}
      proxy_bind off;
      client_max_body_size 5m;
      proxy_hide_header Vary;
      more_set_headers "Vary: Origin";
      more_set_headers "Cache-Control: $basemap_cache_control";

      location /layers/tiles/ {
          if_modified_since before;

          proxy_cache api01;
          proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
          proxy_cache_background_update on;
          proxy_cache_revalidate on;
          proxy_cache_valid {{ .Values.proxy_cache_valid }};
          proxy_cache_lock on;

          proxy_hide_header Access-Control-Allow-Origin;
          add_header X-Cache-Status $upstream_cache_status;
  
          add_header access-control-allow-origin "$http_origin";
          add_header access-control-allow-headers "DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,User-Language";
          add_header access-control-allow-methods "GET, PUT, POST, DELETE, PATCH, OPTIONS";
          add_header access-control-allow-credentials true;
          add_header access-control-max-age 1728000;

          more_set_headers "Strict-Transport-Security: max-age=31536000";
          more_set_headers "X-Frame-Options: SAMEORIGIN";
          more_set_headers "X-Content-Type-Options: nosniff";
          proxy_set_header Host {{ .Values.basemap.s3.host }};

          location ~ ^/layers/tiles/basemap/(sprite.*)$ {
              set $url $1;
              proxy_pass {{ .Values.basemap.s3.url }}/sprite/$url;
          }

          location ~ ^/layers/tiles/basemap/glyphs/(.*)$ {
              set $url $1;
              proxy_pass {{ .Values.basemap.s3.url }}/glyphs/$url;
          }

          location ~ ^/layers/tiles/basemap/(style.*)$ {
              set $url $1;
              proxy_pass {{ .Values.basemap.s3.url }}/styles/$url;
          }
      }

  labels:
    app.kubernetes.io/instance: {{ .Values.envName }}-basemap-tileserver
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: basemap-tileserver-ng
    stage: {{ .Values.envName }}
  name: {{ .Values.envName }}-basemap-tileserver-ng
  namespace: {{ .Release.Namespace }}
spec:
  ingressClassName: {{ .Values.ingressClass }}
  rules:
    - host: {{ .Values.ingressHost }}
      http:
        paths:
          - backend:
              service:
                name: {{ .Values.envName }}-basemap-tileserver
                port:
                  name: main
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - {{ .Values.ingressHost }}
      secretName: {{ .Values.envName }}-basemap-tileserver-tls # < cert-manager will store the created certificate in this secret.
{{ end }}
