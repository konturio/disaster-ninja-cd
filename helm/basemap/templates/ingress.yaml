{{ if .Values.createResource.ingress }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    acme.cert-manager.io/http01-edit-in-place: "true" #required otherwise ACME challenge can't be completed
    cert-manager.io/cluster-issuer: letsencrypt-production #use letsencrypt-staging for testing
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  {{- if .Values.isOfflineInstallation }}
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 5m
    nginx.ingress.kubernetes.io/server-snippet: |
  {{- else }}
    nginx.ingress.kubernetes.io/proxy-body-size: 5m
    {{- if or (eq .Values.k8s_cluster_flavor "k8s-01.kontur.io") (eq .Values.k8s_cluster_flavor "k8s-02.kontur.io") }}
    nginx.ingress.kubernetes.io/location-snippet: |
      include CORS_02_location.inc.conf;
    {{- end }}
    nginx.ingress.kubernetes.io/server-snippet: |
      {{- if or (eq .Values.k8s_cluster_flavor "k8s-01.kontur.io") (eq .Values.k8s_cluster_flavor "k8s-02.kontur.io") }}
      set $cors_config_file '/etc/nginx/default.cors.json';
      {{- end }}
  {{- end }}
      proxy_bind off;
      client_max_body_size 5m;
      proxy_hide_header Vary;
      more_set_headers "Vary: Origin";

      location /layers/tiles/ {
            proxy_cache_valid 600s;
            proxy_cache_key 'layers-tiles-$request_method$host$uri$is_args$args$http_authorization$request_body';

            more_set_headers "Strict-Transport-Security: max-age=31536000";
            more_set_headers "X-Frame-Options: SAMEORIGIN";
            more_set_headers "X-Content-Type-Options: nosniff";

            more_set_headers "Access-Control-Allow-Origin: $http_origin";
            more_set_headers "Access-Control-Allow-Credentials: true";

            more_set_headers "Access-Control-Allow-Methods: *";
            more_set_headers "Access-Control-Allow-Headers: Authorization,Keep-Alive,User-Agent,If-Modified-Since,Cache-Control,Content-Type";

            more_set_headers "Cache-Control: no-transform"; # workaround to Cloudflare's shady behavior when all content is decoded but only supported types are delivered compressed
            #
            #

            # we have to use rewrite to use correctly encoded URL - proxy_pass won't do that for us
            location ~ ^/layers/tiles/basemap/(sprite.*)$ {
                rewrite ^ $request_uri;
                rewrite ^/layers/tiles/basemap/(sprite.*)$ $1 break;
                return 400; # assertion checker

                proxy_pass {{ .Values.basemap.s3.url }}/sprite/$1;
            }

            location ~ ^/layers/tiles/basemap/glyphs/(.*)$ {
                rewrite ^ $request_uri;
                rewrite ^/layers/tiles/basemap/glyphs/(.*)$ $1 break;
                return 400; # assertion checker

                proxy_pass {{ .Values.basemap.s3.url }}/glyphs/$uri;
            }

            location ~ ^/layers/tiles/basemap/(style.*)$ {
                rewrite ^ $request_uri;
                rewrite ^/layers/tiles/basemap/(style.*)$ $1 break;
                return 400; # assertion checker

                proxy_pass {{ .Values.basemap.s3.url }}/styles/$1;
            }
      }

  labels:
    app.kubernetes.io/instance: {{ .Values.envName }}-basemap-tileserver
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: basemap-tileserver-ng
    stage: {{ .Values.envName }}
  name: {{ .Values.envName }}-basemap-tileserver-ng
  namespace: {{ .Release.Namespace }}
spec:
  ingressClassName: {{ .Values.ingressClass }}
  rules:
    - host: {{ .Values.ingressHost }}
      http:
        paths:
          - backend:
              service:
                name: {{ .Values.envName }}-basemap-tileserver
                port:
                  name: main
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - {{ .Values.ingressHost }}
      secretName: {{ .Values.envName }}-basemap-tileserver-tls # < cert-manager will store the created certificate in this secret.
{{ end }}
