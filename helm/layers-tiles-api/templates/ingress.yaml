{{ if .Values.createResource.ingress }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    acme.cert-manager.io/http01-edit-in-place: "true" #required otherwise ACME challenge can't be completed
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    cert-manager.io/cluster-issuer: letsencrypt-production #use letsencrypt-staging for testing
  {{- if .Values.isOfflineInstallation }}
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  {{- end }}
  labels:
    app.kubernetes.io/instance: {{ .Values.envName }}-layers-tiles-api
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: layers-tiles-api
    stage: {{ .Values.envName }}
  name: {{ .Values.envName }}-layers-tiles-api
  namespace: {{ .Release.Namespace }}
spec:
  ingressClassName: nginx
  rules:
  - host: {{ .Values.ingressHost }}
    http:
      paths:
      - backend:
          service:
            name: {{ .Values.envName }}-layers-tiles-api
            port:
              name: lrs-tiles-api
        path: /tiles/
        pathType: Prefix
  tls:
  - hosts:
    - {{ .Values.ingressHost }}
    secretName: {{ .Values.envName }}-layers-tiles-api-tls # < cert-manager will store the created certificate in this secret.
{{ end }}